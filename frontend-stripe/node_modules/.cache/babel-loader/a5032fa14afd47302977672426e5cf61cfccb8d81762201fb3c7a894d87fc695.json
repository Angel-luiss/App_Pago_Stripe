{"ast":null,"code":"const handleSubmit = async event => {\n  event.preventDefault();\n  setError(null);\n  setSuccess(null);\n  const cardElement = elements.getElement(CardElement);\n  try {\n    // Llamada a tu backend para crear el PaymentIntent\n    const response = await fetch('http://localhost:5001/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: 1000\n      }) // Monto en centavos\n    });\n    const {\n      clientSecret\n    } = await response.json();\n    console.log('Client Secret:', clientSecret);\n    if (!clientSecret) {\n      throw new Error('No se recibió el clientSecret');\n    }\n\n    // Aquí se desactiva la advertencia HTTP (solo para pruebas locales)\n    const {\n      error\n    } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement\n      },\n      // Ignora la advertencia de HTTP cuando estés en modo test\n      use_stripe_sdk: false\n    });\n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n  } catch (err) {\n    setError(`Error en la transacción: ${err.message}`);\n  }\n};","map":{"version":3,"names":["handleSubmit","event","preventDefault","setError","setSuccess","cardElement","elements","getElement","CardElement","response","fetch","method","headers","body","JSON","stringify","amount","clientSecret","json","console","log","Error","error","stripe","confirmCardPayment","payment_method","card","use_stripe_sdk","message","err"],"sources":["/Users/angel/Downloads/Pagos/frontend-stripe/src/CheckoutForm.js"],"sourcesContent":["const handleSubmit = async (event) => {\n  event.preventDefault();\n  setError(null);\n  setSuccess(null);\n\n  const cardElement = elements.getElement(CardElement);\n\n  try {\n    // Llamada a tu backend para crear el PaymentIntent\n    const response = await fetch('http://localhost:5001/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount: 1000 }), // Monto en centavos\n    });\n\n    const { clientSecret } = await response.json();\n    console.log('Client Secret:', clientSecret);\n\n    if (!clientSecret) {\n      throw new Error('No se recibió el clientSecret');\n    }\n\n    // Aquí se desactiva la advertencia HTTP (solo para pruebas locales)\n    const { error } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n      },\n      // Ignora la advertencia de HTTP cuando estés en modo test\n      use_stripe_sdk: false,\n    });\n\n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess('Pago exitoso');\n    }\n\n  } catch (err) {\n    setError(`Error en la transacción: ${err.message}`);\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,KAAK,IAAK;EACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;EACtBC,QAAQ,CAAC,IAAI,CAAC;EACdC,UAAU,CAAC,IAAI,CAAC;EAEhB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,UAAU,CAACC,WAAW,CAAC;EAEpD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;MAC1EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC,CAAE;IAC1C,CAAC,CAAC;IAEF,MAAM;MAAEC;IAAa,CAAC,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC9CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,YAAY,CAAC;IAE3C,IAAI,CAACA,YAAY,EAAE;MACjB,MAAM,IAAII,KAAK,CAAC,+BAA+B,CAAC;IAClD;;IAEA;IACA,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMC,MAAM,CAACC,kBAAkB,CAACP,YAAY,EAAE;MAC9DQ,cAAc,EAAE;QACdC,IAAI,EAAErB;MACR,CAAC;MACD;MACAsB,cAAc,EAAE;IAClB,CAAC,CAAC;IAEF,IAAIL,KAAK,EAAE;MACTnB,QAAQ,CAACmB,KAAK,CAACM,OAAO,CAAC;IACzB,CAAC,MAAM;MACLxB,UAAU,CAAC,cAAc,CAAC;IAC5B;EAEF,CAAC,CAAC,OAAOyB,GAAG,EAAE;IACZ1B,QAAQ,CAAC,4BAA4B0B,GAAG,CAACD,OAAO,EAAE,CAAC;EACrD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}