{"ast":null,"code":"var _jsxFileName = \"/Users/angel/Downloads/Pagos/frontend-stripe/src/CheckoutForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n    setIsProcessing(true);\n    const cardElement = elements.getElement(CardElement);\n    try {\n      // Llamada a tu backend para crear el PaymentIntent\n      const response = await fetch('http://localhost:5001/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: 1000\n        }) // Monto en centavos\n      });\n      const {\n        clientSecret\n      } = await response.json();\n      console.log('Client Secret:', clientSecret);\n      if (!clientSecret) {\n        throw new Error('No se recibió el clientSecret');\n      }\n      const {\n        error\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardElement\n        }\n      });\n      if (error) {\n        setError(error.message);\n      } else {\n        setSuccess('Pago exitoso');\n      }\n    } catch (err) {\n      setError(`Error en la transacción: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (!stripe || !elements) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando m\\xE9todos de pago...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe || isProcessing,\n      children: isProcessing ? 'Procesando...' : 'Pagar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"P2t4a7I3XfsWRobhgWJzmoQlOXQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","CheckoutForm","_s","stripe","elements","error","setError","success","setSuccess","isProcessing","setIsProcessing","handleSubmit","event","preventDefault","cardElement","getElement","response","fetch","method","headers","body","JSON","stringify","amount","clientSecret","json","console","log","Error","confirmCardPayment","payment_method","card","message","err","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","disabled","_c","$RefreshReg$"],"sources":["/Users/angel/Downloads/Pagos/frontend-stripe/src/CheckoutForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n    setIsProcessing(true);\n\n    const cardElement = elements.getElement(CardElement);\n\n    try {\n      // Llamada a tu backend para crear el PaymentIntent\n      const response = await fetch('http://localhost:5001/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ amount: 1000 }), // Monto en centavos\n      });\n\n      const { clientSecret } = await response.json();\n      console.log('Client Secret:', clientSecret);\n\n      if (!clientSecret) {\n        throw new Error('No se recibió el clientSecret');\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardElement,\n        },\n      });\n\n      if (error) {\n        setError(error.message);\n      } else {\n        setSuccess('Pago exitoso');\n      }\n\n    } catch (err) {\n      setError(`Error en la transacción: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (!stripe || !elements) {\n    return <div>Cargando métodos de pago...</div>;\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe || isProcessing}>\n        {isProcessing ? 'Procesando...' : 'Pagar'}\n      </button>\n      {error && <div>{error}</div>}\n      {success && <div>{success}</div>}\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}